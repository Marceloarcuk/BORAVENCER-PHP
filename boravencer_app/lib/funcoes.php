<?php//função para setar os selectsfunction selected( $value, $selected ){    return $value==$selected ? ' selected="selected"' : '';}//select php com jqueryfunction selectedj( $value, $selected ){    if($value==$selected){        $selec='selected="selected"';        return $selec;    }    else{        $selec='';        return $selec;    }}//função para setar o post dos checkeds (radio ou select)function checked( $value, $checked ){    return $value==$checked ? ' checked="checked"' : '';}//função para setar o post dos checkeds (radio ou select) javafunction checkedj( $value, $checked ){    if($value==$checked){        $check='checked="checked"';        return $check;    }    else{        $check='';        return $check;    }}//mascara para cpffunction mascaraCpf($cpf){        $cpfarray=str_split($cpf, 3);        $cpf1=$cpfarray[0].".";        $cpf2=$cpfarray[1].".";        $cpf3=$cpfarray[2]."-";        $cpf4=$cpfarray[3];        $cpfConvert=$cpf1.$cpf2.$cpf3.$cpf4;        return $cpfConvert;}function mascaraCep($cep){    $ceparray=str_split($cep, 1);    $cepConvert=$ceparray[0].$ceparray[1].".".$ceparray[2].$ceparray[3].$ceparray[4]."-".$ceparray[5].$ceparray[6].$ceparray[7];    return $cepConvert;}function retiraMascaraCpf($cpf){    $parte1=explode(".", $cpf);    $parte2=explode("-", $parte1[2]);    $cpftrat=$parte1[0].$parte1[1].$parte2[0].$parte2[1];    return $cpftrat;}function retiraMascaraCep($cep){    $parte1=explode(".", $cep);    $parte2=explode("-", $parte1[1]);    $ceptrat=$parte1[0].$parte2[0].$parte2[1];    return $ceptrat;}//function converte_inscricao($numeroIns){    $ins=strlen($numeroIns);    if($ins==1){        $numeroIns="0000".$numeroIns;    }    else if($ins==2){        $numeroIns="000".$numeroIns;    }    else if($ins==3){        $numeroIns="00".$numeroIns;    }    else if($ins==4){        $numeroIns="0".$numeroIns;    }    else $numeroIns="".$numeroIns;    return $numeroIns;}//trata a stringfunction tStr($string){	return addslashes(htmlentities(trim($string)));}//valida cpffunction validaCPF($cpf = null) {    // Verifica se um número foi informado    if(empty($cpf)) {        return false;    }    // Elimina possivel mascara    $cpf = str_pad($cpf, 11, '0', STR_PAD_LEFT);    // Verifica se o numero de digitos informados é igual a 11    if (strlen($cpf) != 11) {        return false;    }    // Verifica se nenhuma das sequências invalidas abaixo    // foi digitada. Caso afirmativo, retorna falso    else if ($cpf == '00000000000' ||        $cpf == '11111111111' ||        $cpf == '22222222222' ||        $cpf == '33333333333' ||        $cpf == '44444444444' ||        $cpf == '55555555555' ||        $cpf == '66666666666' ||        $cpf == '77777777777' ||        $cpf == '88888888888' ||        $cpf == '99999999999') {        return false;        // Calcula os digitos verificadores para verificar se o        // CPF é válido    } else {        for ($t = 9; $t < 11; $t++) {            for ($d = 0, $c = 0; $c < $t; $c++) {                $d += $cpf{$c} * (($t + 1) - $c);            }            $d = ((10 * $d) % 11) % 10;            if ($cpf{$c} != $d) {                return false;            }        }        return true;    }}// gera a URL amigávelfunction limpaUrl($str){    $str = strtolower(utf8_decode($str)); $i=1;    $str = strtr($str, utf8_decode('àáâãäåæçèéêëìíîïñòóôõöøùúûýýÿ'), 'aaaaaaaceeeeiiiinoooooouuuyyy');    $str = preg_replace("/([^a-z0-9])/",'-',utf8_encode($str));    while($i>0) $str = str_replace('--','-',$str,$i);    if (substr($str, -1) == '-') $str = substr($str, 0, -1);    return $str;}// recebe uma data e hora no formato dd/mm/aaaa hh:mm:ss// para o formato aaaa-mm-dd hh:mm:ss// o nome significa brasil to datetimefunction brToDt($val=null,$now=null){	if($val==null){		$date = new DateTime();		return $date->format('Y-m-d H:i:s');	}	$tmp1 = explode(" ",$val);		// se $tmp1[1] não existir, significa que pode ter vindo 	// somente a data, exemplo, dd/mm/aaaa	// sendo assim vamos considerar o valor 00:00:00 para o segundo campo	if(!isset($tmp1[1])){		if($now==null){			$tmp1[1] = "00:00:00";		} else {			$date = new DateTime();			$tmp1[1] = $date->format('H:i:s');		}	}		// precisamos formatar somente $tmp1[0]	$tmp2 = explode("/",$tmp1[0]);		// vamos verificar se o resultado final é válido	$datetime = $tmp2[2]."-".$tmp2[1]."-".$tmp2[0]." ".$tmp1[1];		if(validateDate($datetime)){		return $datetime;	} else {		return "0000-00-00 00:00:00";	}}// recebe uma data e hora no formato aaaa-mm-dd hh:mm:ss// e retorna dd/mm/aaaa hh:mm:ssfunction dtToBr($val=null,$now=null){	if($val == null){		$date = new DateTime();		return $date->format('d/m/Y H:i:s');	}	// vamos verificar se o que recebemos é valido	if(validateDate($val)){		$date = new DateTime($val);		return $date->format('d/m/Y H:i:s');	} else {		if($now==null){			return "00/00/0000 00:00:00";		} else {			$date = new DateTime();			return $date->format('d/m/Y H:i:s');		}	}}function validateDate($date, $format = 'Y-m-d H:i:s'){    $d = DateTime::createFromFormat($format, $date);    return $d && $d->format($format) == $date;}